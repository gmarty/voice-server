#!/usr/bin/env node
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

'use strict';

const WebSocket = require('ws');
const watson = require('watson-developer-cloud');
const child_process = require('child_process');
const fs = require('fs');
const url = require('url');
const vaani = require('./index');

const ssldir = './resources/ssl/';

var program = require('commander'),
    telltext,
    audiofile,
    stress,
    config = vaani.getConfig();

program
    .version('0.0.1')
    .description('Vaani command line client.')
    .option('-s, --server [url]',           'Vaani server URL. If not specified, starts a local server and connects to it.')
    .option('-r, --recognizer [provider]',  'Overrides the default STT recognition service provider in config file. Only available for local serving (ignored in case of -s option).')
    .option('-v, --validate',               'Validate Vaani server certificate.')
    .option('-m, --mute',                   'No audio output.')
    .option('-q, --quiet',                  'No printing of server responses.')
    .option('-n, --no-adding',              'No adding of items to a list.');

program
    .command('tell [text...]')
    .description('Sends a command to Vaani by converting the provided text into audio data.')
    .action(text => telltext = text.join(' '));

program
    .command('send <file>')
    .description('Sends a command to Vaani by loading it from the specified audio file in WAV format. Use "-" to load from STDIN.')
    .action(file => audiofile = file);

program
    .command('stress <times> [parallel=1] [delay=0]')
    .description('Sends <times> random commands to Vaani, with [parallel=1] concurrent threads and [delay=0] seconds between calls.')
    .action((times, parallel, delay) => stress = { times: times * 1, parallel: parallel ? parallel * 1 : 1, delay: delay ? delay * 1 : 0 });

program.parse(process.argv);
config.port = 8585; // for development and testing, as port 80 is typically blocked
config.secure = false; // no security required for development and testing
config.stt.default = program.recognizer || config.stt.default;

const text_to_speech = watson.text_to_speech(config.tts.watson);

const fail = (message) => { console.error(message); process.exit(1); }

const call = (command, params) => child_process.spawn(command, params.split(' '));

const send = (serverurl, getaudio, callback) => {
    var server = url.parse(serverurl, true, false),
        options = { rejectUnauthorized: !!program.validate };

    server.pathname = server.pathname || '/';
    serverurl = url.format(server);
    if (server.protocol === 'wss:') {
        options.key =  fs.readFileSync(ssldir + 'client-key.pem');
        options.cert = fs.readFileSync(ssldir + 'client-crt.pem');
        options.ca =   fs.readFileSync(ssldir + 'ca-crt.pem');
        options.passphrase = config.passphrase;
    }

    var response,
        vs = new WebSocket(serverurl, null, options);

    const output = message => program.quiet || console.dir(message);

    vs.on('open', () => {
        var sox = call('sox', '-t wav - -t raw -b 16 -e signed -c 1 -r 16k -'),
            audio = getaudio();
        sox.stdout.on('data', data => vs.send(data));
        sox.stdout.on('close', () => vs.send('EOS'));
        sox.stdin .on('error', err => fail('Problem recognizing or converting audio format: ' + err));
        audio.pipe(sox.stdin);
        if(program.mute) {
            vs.on('message', data => response || output(response = JSON.parse(data)));
            vs.on('close', () => callback(response ? response.status : 1));
        } else {
            var p1 = call('play', '-t wav -');
            audio.pipe(p1.stdin);
            var p2 = call('play', '-t wav -');
            vs.on('message', data => response ? p2.stdin.write(data) : output(response = JSON.parse(data)));
            vs.on('close', () => p2.stdin.end());
            p2.stdout.on('close', () => callback(response ? response.status : 1));
        }
    });

    vs.on('error', err => fail('Problem connecting to Vaani server: ' + err));
};

const execute = (serverurl) => {
    if(telltext) {
        const callback = err => err && fail('TTS service: ' + err);
        send(
            serverurl,
            () => {
                var audio = text_to_speech.synthesize({
                    text: telltext,
                    voice: 'en-US_AllisonVoice',
                    accept: 'audio/wav'
                }, err => callback(err));
                audio.on('error', err => callback(err));
                return audio;
            },
            status => process.exit(status)
        );
    } else if(audiofile) {
        send(
            serverurl,
            () => {
                var audio = (audiofile == '-') ? process.stdin : fs.createReadStream(audiofile);
                audio.on('error', err => fail('Problem reading from audio file ' + audiofile + ': '+ err));
                return audio;
            },
            status => process.exit(status)
        );
    } else if(stress) {
        program.mute = true;
        var times = stress.times,
            parallel = stress.parallel,
            failed = 0,
            report = { 'total number of calls': times, 'failed calls': 0 },
            dir = 'resources/stt/wav/',
            files = fs.readdirSync(dir).filter(item => /\.wav/.test(item));
        const step1 = () => send(
            serverurl,
            () => {
                var file = dir + files[Math.floor(Math.random() * files.length)],
                    audio = fs.createReadStream(file);
                audio.on('error', err => fail('Problem reading from audio file ' + file + ': '+ err));
                return audio;
            },
            step2
        );
        const step2 = status => {
            report['failed calls'] += Math.min(status, 1);
            var key = 'status ' + status;
            report[key] = report[key] ? (report[key] + 1) : 1;
            if(times-- > 1)
                setTimeout(step1, 1000 * stress.delay);
            else {
                console.log('\n\n');
                console.dir(report);
                process.exit(0);
            }
        }
        while(parallel--) step1();
    }
};

if(!telltext && !audiofile && !stress) {
    program.help();
    process.exit(1);
} else if(program.server) {
    execute(program.server);
} else {
    vaani.serve(config, () => execute((config.secure ? 'wss' : 'ws') + '://localhost:' + config.port));
}
